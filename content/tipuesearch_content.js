var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': '環境設定', 'text': '', 'tags': '', 'url': '環境設定.html'}, {'title': 'SSH', 'text': '批次檔設定 \n 執行隨身碟 SciTE.exe ( 位於 201906_fall\\data\\wscite415\\wscite 目錄下 ) \n 開啟 \xa0start_mdecourse.bat 並加入 \n REM for putty \n Set GIT_HOME=%Cdisk%:\\portablegit\\bin\\ \n Set GIT_SSH=%Disk%:\\putty\\plink.exe \n SSH 設定 \n 到\xa0 .ssh\xa0 的目錄下 \n 編輯\xa0 config,插入 \n P roxy Command y:/putty/plink.exe github.com %h %p \n 並註解掉 \n IdentityFile "y:\\home_mdecourse\\.ssh\\id_rsa" \n \n 設定 SSH key 的使用配置 ( 使用\xa0Ipv 6 網路 ) \n 先下載\xa0 putty \xa0 , 放到可攜系統的 data 目錄底下 \n Key 轉換 ( 此設定方法是拿先前的\xa0 Open SSH key  ) \n 先建立一個 key ( 若之前已經有 Open SSH 的 key 就可以直接用那把 key ) \n 執行\xa0puttygen.exe\xa0 \n 載入一個\xa0 Open SSH 的 key \n \n *p.s.\xa0 若是使用之前的 key , bits 數請寄的設定為 4096 , 轉換成的類型請設定成 rsa\xa0 \n 轉存成 rsa 的 prviate key ( ppk檔 ) \n \n Putty 設定 \n 執行 putty.exe \n 建立一個 session 叫 github.com \n Host Name : github.com \n Port : 22 \n Connection type : SSH \n \n 設定 proxy\xa0 \n Proxy type : HTTP \n Proxy hostname :\xa0 [2001:288:6004:17::7]\xa0\xa0\xa0\xa0 Port : 3128 \n Do DNS name lookup at proxy end :\xa0 Auto \n Username :\xa0 kmolab \n Password : kmolab \n \n 設定 SSH 底下的 Auth \n Private key file for authentication :\xa0\xa0 ( 請指定 rsa- key  的位置\xa0 ) \n \n *p.s.\xa0 需指定 ppk 檔 \n 儲存 session 設定 \n \n', 'tags': '', 'url': 'SSH.html'}, {'title': 'Batch Command', 'text': 'cad.bat - 啟動 wsgi.py 並且在瀏覽器開啟 https 9443 動態網頁 \n @echo off\ny:\ncd tmp\\cad2019\\cmsimde\nstart python wsgi.py | start chrome https://localhost:9443 \n \xa0cadh.bat - 啟動 http-server 並且在瀏覽氣開啟 https 8444 靜態網頁 \n @echo off\ny:\ncd tmp\\cad2019\\\nstart python http-server.py | start chrome https://localhost:8444 \n cadg.bat -\xa0啟動 gitextensions\xa0 \n @echo off\nY:GitExtensions\\gitextensions.exe  browse y:\\tmp\\cad2019\\ \n \n', 'tags': '', 'url': 'Batch Command.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Solvespace', 'text': '', 'tags': '', 'url': 'Solvespace.html'}, {'title': 'Solvespace 編譯', 'text': '先將 Y:\\portablegit\\bin\\sh.exe 改名為 sh_rename_for_solvespace.exe \n re sh.exe sh_rename_for_solvespace.exe \n *p.s.\xa0 re 是重新命名的指令 \n git version 查驗 git 版本 ( 需要git 2.13 版本以上 ) \n git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace \n *p.s.\xa0 使用\xa0 git clone\xa0 --recurse-submodules 取得所有子模組資料，clone 前請先確認 \n 是否有重複檔名的資料，並耐心等候取得資料，以確保檔案完整性 \n 上述指令同: \n git clone\xa0 https://github.com/solvespace/solvespace.git \xa0 \n cd solvespace \n git submodule init \n git submodule update \n 編輯 Y:\\tmp\\solvespace\\extlib\\angle\\CMakeLists.txt 將 713 行和 714行註解掉，像底下這樣 \n #list(APPEND ANGLE_DEFINITIONS #"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \\"d3dcompiler_47.dll\\", \\"d3dcompiler_46.dll\\", \\"d3dcompiler_43.dll\\" }") endif() \n *p.s.\xa0 漏掉此步驟，否則後續編譯會有錯誤 \n 到\xa0 Y:\\tmp\\solvespace\\extlib\\libpng 目錄底下新建名為 build目錄 \n cd solvespace\xa0 \n cd extlib \n cd libpng \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n mingw32-make \n 重新命名 Y:\\tmp\\solvespace\\extlib\\libpng\\build\\libpng.dll.a 改名為 libpng_static.a 並且複製到 Y:\\msys64\\mingw64\\lib \n 回到 Y:\\tmp\\solvespace 目錄下新建名為 build目錄 \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release \n mingw32-make \n 完成以上編譯後執行\xa0 Y: tmp\\solvespace\\build\\bin\\solvespace.exe\xa0 \xa0，若能成功執行就能確定完成 Solvespace 編譯 \n \n \n W7 \n 在about裡插入This is Solvespace compiled by 學號 (40723150) \n \n', 'tags': '', 'url': 'Solvespace 編譯.html'}, {'title': 'Solvespace 操作', 'text': '快捷指令介紹 \n 幾何 \n S 直線 \n R 矩形 \n C 圓形 \n P 點 \n Shift+X 擠出 \n Shift+L 迴轉 \n 視角 \n W 正視 (指定或編輯面) \n F2 正視 (與螢幕最接近平行的工作面轉正) \n F3 等角 \n 約束指令 \n M 中心 \n D 標註(直線) \n N 標註(角度) \n Q 等長 \n H 水平 \n V 垂直 \n L 平行 \n O 重合 \n [ 垂直 \n Solvespace Tutorial #12 \n \n \n W7 \n 繪圖驗證 7 \n \n 繪圖驗證 10 \n \n', 'tags': '', 'url': 'Solvespace 操作.html'}, {'title': 'STL', 'text': '\n \n', 'tags': '', 'url': 'STL.html'}, {'title': 'V-rep', 'text': '', 'tags': '', 'url': 'V-rep.html'}, {'title': 'Webots', 'text': 'Webots 啟動: \n 執行路徑設定 \n 在 start_mdecourse_webots.bat 插入 \n set path_webots=%Disk%:\\Webots_2019b_rev1\\msys64\\mingw64\\bin;%Disk%:\\Webots_2019b_rev1\\msys64\\usr\\bin\n \n \n 在 path 的最後面加入\xa0%path_webots% \n \n 啟動指令: \n 在 y:\\ 根目錄建立 start_webots.bat , 內容為 \n start Y:\\Webots_2019b_rev1\\msys64\\mingw64\\bin\\webots.exe \n 當隨身程式系統納入上述兩個條件並啟動後, 可以直接在命令列輸入 start_webots.bat 啟動 \n 將\xa0 Webots_2019b_rev1.7z \xa0解壓縮後放在 data 目錄裡面 \n \n Webots 終止 \n 在 stop.bat 插入 \n taskkill /IM webots.exe /F\n \n \n', 'tags': '', 'url': 'Webots.html'}, {'title': 'NX', 'text': '', 'tags': '', 'url': 'NX.html'}, {'title': 'NX3', 'text': '', 'tags': '', 'url': 'NX3.html'}, {'title': 'NX12', 'text': 'NX12 教材 \xa0資料整理 \n', 'tags': '', 'url': 'NX12.html'}, {'title': 'CH1 引言', 'text': '工程師現在使用 CAD、CAM 和 CAE 系統來進行自動化的設計和生產，現在這些系統每天被用在各種不同的工程任務。底下簡要說明如何 使用 CAD、CAM 和 CAE\xa0來實現產品的過程。 \n 1.1 產品實現過程 \n 產品實現過程可以大致分為兩個階段：設計和製造。 \n 設計過程可收集了相關的設計信息，後可制定了設計規範。根據相關設計信息進行可行性研究，並進行詳細設計和分析。詳細設計包括設計概念，預期產品圖紙，草圖和幾何建模。分析包括應力分析，干涉檢查，運動學分析，質量特性計算和公差分析以及設計優化。 \n 製造過程始於從生產計劃開始的車間活動，該活動使用設計過程圖並以實際產品結束。流程計劃包括生產計劃，材料採購和機器選擇等活動。在生產過程的各個階段，需要完成各種任務，例如購買新工具，NC 編程和質量檢查。流程計劃包括對產品製造中使用的所有流程的計劃。通過質量控制檢查的零件將經過功能測試，包裝，標記和運送給客戶。 \n \n 上圖顯示了代表產品實現過程的圖表（Mastering CAD / CAM，由Ibrahim Zeid，McGraw Hill，2005年） \n 1.2\xa0 CAD / CAM 開發的簡要歷史 \n 當前的 CAD / CAM 技術的起源可以追溯到文明古代，當時古埃及的工程師意識到了圖形通信。正交投影實踐今天是在1800年代發明的。 CAD / CAM 系統的真正開發始於 1950 年代。 CAD / CAM 在上個世紀經歷了四個主要的發展階段。 \n 1950 年代被稱為交互式電腦圖形時代。麻省理工學院的伺服機構實驗室在三軸銑床上演示了數控（NC）的概念。發展歷程在這個時代，由於當時電腦的缺點而放慢了速度。在 1950 年代後期，開始了自動編程工具（APT）的開發，並探索了通用汽車公司互動圖形的潛力。 \n 1960 年代是交互式電腦圖形學最關鍵的研究時期。Ivan Sutherland 開發了畫板系統，該系統演示了創建圖紙和在陰極射線管（CRT）上以交互方式進行對象交替。 CAD 一詞開始出現，「設計」一詞超越了基本的製圖概念。通用汽車宣布了他們的 DAC-1 系統和 Bell Technologies 推出了GRAPHIC 1 遠程顯示系統。 \n 在 1970 年代期間，前十年在電腦圖形學方面的研究工作開始富有成果。按行業，政府和學術界，並且實現了交互式電腦圖形學在提高生產率方面的潛力。 1970 年代被描述為電腦製圖和專用儀器設計應用程序開始的黃金時代。國家計算機圖形協會（NCGA）成立，並且初始圖形交換規範（IGES）開始了。 \n 在 1980 年代，新的理論和算法得到了發展，並且設計和製造的各種要素都得到了發展。主要的研發重點是擴大 CAD / CAM 系統超越了三維幾何設計，並提供了更多的工程應用。 \n 現今 CAD / CAM 的開發側重於設計和製造中各種元素的高效，快速集成和自動化，以及新算法的開發。有許多可直接使用的商業 CAD / CAM 軟件包，它們非常易於使用並且非常友好。以下是當前市場中的一些商業軟件包。 \n \n Solid Edge、AutoCAD、Inventor 和 TurboCAD 是一些負擔得起的CAD軟件系統。 \n NX、Pro-E、CATIA 和 SolidWorks 是高端建模和設計軟體更昂貴但功能更強大的系統。這些軟體系統還具有電腦輔助的製造和工程分析功能。 \n Onshape 和 Fusion 360 是建立在雲端的 CAD 軟件，可通過用戶的瀏覽器提供CAD 功能。 \n ANSYS、ABAQUS、NASTRAN 和 COMSOL 是主要用於 CAE 。 \n \n 1.3\xa0CAD/CAM/CAE 的定義 \n 1.3.1 電腦輔助設計 – CAD \n CAD 是與使用電腦系統來協助設計的創建、修改、分析和優化有關的技術。 任何體現電腦圖形學的電腦程序和在設計過程中促進工程功能的應用程序都可以歸類為 CAD 軟件。 CAD 的最基本作用是定義設計的幾何形狀－機械零件、產品組裝、建築結構、電子電路、建築物佈局等。CAD 系統的最大好處是可以節省大量時間和精力。 減少因每次需要重新定義設計的幾何形狀而導致的錯誤。 \n 1.3.2 電腦輔助製造\xa0– CAM \n CAM 技術涉及電腦系統的計畫、管理和控制，該電腦系統通過與工廠生產資源的電腦介面來的計畫、管理和控制製造操作。 CAM 最重要的領域之一是數控（NC）。 這是一種使用編程指令來控制工具機的技術，該工具機利用切削、銑削、磨削、沖壓或將原料製成成品。 CAM的另一個重要功能是在機器人編程中。 流程計劃也是電腦自動化的目標。 \n 1.3.3 電腦輔助工程\xa0– CAE \n CAE 技術使用計算機系統來分析 CAD 創建的產品的功能，從而使設計人員可以模擬和研究產品的性能，從而可以優化和優化設計。 CAE 工具可用於許多不同類型的分析。 例如，運動學分析程序可用於確定機構中的運動路徑和連桿速度。 動態分析程序可用於確定複雜組件（例如汽車）中的載荷和位移。 最受歡迎的分析方法之一是使用有限元素方法（FEM）。 該方法可用於確定應力，變形，傳熱，磁場分佈，流體流動和其他連續場問題，而這些問題通常很難用任何其他方法解決。 \n 1.4 教程範圍 \n \n 第2章介紹了 NX 12 的基本知識和基本功能。 \n 第3章介紹了草圖的概念。它描述瞭如何創建草圖以及給出幾何和尺寸約束。 \n 第4章零件的實際設計和建模。如何使用特徵，例如參考特徵、掃掠特徵和原始特徵。 \n 第5章如何從零件模型轉成工程圖。在本章中，將示範如何通過添加視圖，標註零件圖形的尺寸以及修改圖形中的各種屬性（例如文本大小、箭頭大小和公差）來創建圖紙。 \n 第6章介紹了裝配建模的概念及其術語。它描述了 TopDown 建模和 Bottom-Up 建模。我們將使用自下而上的模型進行組裝組件變成產品。 \n 第7章介紹了自由格式建模。將演示建模曲線和平滑表面的方法。 \n 第8章簡要介紹了NX 12中用於有限元分析的設計仿真。 \n 第9章介紹刀具路徑的生成、驗證和仿真，以創建CNC（計算機數字代碼），以從多軸甚至先進的CNC機床生產設計零件。 \n 每章中使用的示例和練習題經過精心設計，最終將在本章中進行匯總。 由於這獨特功能，您應該保存在每一章中創建的所有模型。 \n \n', 'tags': '', 'url': 'CH1 引言.html'}, {'title': 'CH2 入門', 'text': '2.1 \n 2.2 \n 2.3 \n 2.4 \n 2.5 \n 2.6 \n', 'tags': '', 'url': 'CH2 入門.html'}, {'title': 'CH3 二維草圖', 'text': '3.1 \n 3.2 \n 3.3 \n 3.4 \n 3.5 \n 3.6 \n', 'tags': '', 'url': 'CH3 二維草圖.html'}, {'title': 'CH4 三維建模', 'text': '4.1 \n 4.2 \n 4.3 \n 4.4 \n 4.5 \n 4.6 \n 4.7 \n 4.8 \n 4.9 \n', 'tags': '', 'url': 'CH4 三維建模.html'}, {'title': 'CH5 出圖', 'text': '5.1 \n 5.2 \n 5.3 \n 5.4 \n 5.5 \n 5.6 \n 5.7 \n', 'tags': '', 'url': 'CH5 出圖.html'}, {'title': 'CH6 組立', 'text': '6.1 \n 6.2 \n 6.3 \n 6.4 \n 6.5 \n 6.6 \n', 'tags': '', 'url': 'CH6 組立.html'}, {'title': 'CH7 曲面建模', 'text': '7.1 \n 7.2 \n 7.3 \n', 'tags': '', 'url': 'CH7 曲面建模.html'}, {'title': 'CH8 有限元素分析', 'text': '8.1 \n 8.2 \n 8.3 \n 8.4 \n 8.5 \n 8.6 \n 8.7 \n 8.8 \n', 'tags': '', 'url': 'CH8 有限元素分析.html'}, {'title': 'CH9 加工模擬', 'text': '9.1 \n 9.2 \n 9.3 \n 9.4 \n 9.5', 'tags': '', 'url': 'CH9 加工模擬.html'}]};